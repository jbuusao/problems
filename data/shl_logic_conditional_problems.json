        {"input": [20.0, 40, 5, 0, 0, 0, 0], "expected": {"regular_pay": 800.0, "overtime_pay": 150.0, "holiday_pay": 0.0, "night_shift_pay": 0.0, "bonus": 0.0, "gross_pay": 950.0, "deductions": 0.0, "net_pay": 950.0, "total_hours": 45}},
        {"input": [25.0, 35, 15, 8, 10, 500, 200], "expected": {"regular_pay": 875.0, "overtime_pay": 625.0, "holiday_pay": 400.0, "night_shift_pay": 62.5, "bonus": 500.0, "gross_pay": 2462.5, "deductions": 200.0, "net_pay": 2262.5, "total_hours": 68}},
        {"input": [15.0, 40, 0, 0, 0, 100, 50], "expected": {"regular_pay": 600.0, "overtime_pay": 0.0, "holiday_pay": 0.0, "night_shift_pay": 0.0, "bonus": 100.0, "gross_pay": 700.0, "deductions": 50.0, "net_pay": 650.0, "total_hours": 40}},
        {"input": [30.0, 30, 20, 4, 5, 0, 300], "expected": {"regular_pay": 900.0, "overtime_pay": 900.0, "holiday_pay": 240.0, "night_shift_pay": 22.5, "bonus": 0.0, "gross_pay": 2062.5, "deductions": 300.0, "net_pay": 1762.5, "total_hours": 59}},
        {"input": [-10, 40, 0, 0, 0, 0, 0], "expected": null}
      ]
    },
    {
      "id": 96,
      "title": "BMI Calculator with Health Categories",
      "statement": "Calculate Body Mass Index (BMI) and categorize health status. BMI = weight(kg) / height(m)². Categories: Underweight (<18.5), Normal (18.5-24.9), Overweight (25-29.9), Obese Class I (30-34.9), Obese Class II (35-39.9), Obese Class III (≥40). Support both metric and imperial units with automatic conversion.",
      "function_signature": "def calculate_bmi(weight, height, units='metric'):",
      "categories": ["logic_and_conditional", "health_calculations"],
      "python_constructs": ["unit_conversion", "health_categorization", "mathematical_calculations"],
      "hints": [
        "Convert imperial units: pounds to kg (÷2.205), inches to meters (×0.0254)",
        "Apply BMI formula: weight(kg) / height(m)²",
        "Categorize BMI result using standard health classifications"
      ],
      "solution": "def calculate_bmi(weight, height, units='metric'):\n    # Validate inputs\n    if not isinstance(weight, (int, float)) or not isinstance(height, (int, float)):\n        return None\n    \n    if weight <= 0 or height <= 0:\n        return None\n    \n    if units not in ['metric', 'imperial']:\n        return None\n    \n    # Convert to metric if needed\n    if units == 'imperial':\n        # Convert pounds to kg and inches to meters\n        weight_kg = weight / 2.205\n        height_m = height * 0.0254\n    else:\n        weight_kg = weight\n        height_m = height\n    \n    # Calculate BMI\n    bmi = weight_kg / (height_m ** 2)\n    \n    # Determine category\n    if bmi < 18.5:\n        category = 'Underweight'\n        risk = 'Increased risk of malnutrition, osteoporosis'\n    elif bmi < 25.0:\n        category = 'Normal weight'\n        risk = 'Low risk'\n    elif bmi < 30.0:\n        category = 'Overweight'\n        risk = 'Increased risk of cardiovascular disease'\n    elif bmi < 35.0:\n        category = 'Obese Class I'\n        risk = 'High risk of health problems'\n    elif bmi < 40.0:\n        category = 'Obese Class II'\n        risk = 'Very high risk of health problems'\n    else:\n        category = 'Obese Class III'\n        risk = 'Extremely high risk of health problems'\n    \n    return {\n        'bmi': round(bmi, 2),\n        'category': category,\n        'health_risk': risk,\n        'weight_kg': round(weight_kg, 2),\n        'height_m': round(height_m, 2)\n    }",
      "test_cases": [
        {"input": [70, 1.75, "metric"], "expected": {"bmi": 22.86, "category": "Normal weight", "health_risk": "Low risk", "weight_kg": 70.0, "height_m": 1.75}},
        {"input": [180, 72, "imperial"], "expected": {"bmi": 24.41, "category": "Normal weight", "health_risk": "Low risk", "weight_kg": 81.63, "height_m": 1.83}},
        {"input": [90, 1.6, "metric"], "expected": {"bmi": 35.16, "category": "Obese Class II", "health_risk": "Very high risk of health problems", "weight_kg": 90.0, "height_m": 1.6}},
        {"input": [110, 68, "imperial"], "expected": {"bmi": 16.73, "category": "Underweight", "health_risk": "Increased risk of malnutrition, osteoporosis", "weight_kg": 49.89, "height_m": 1.73}},
        {"input": [-70, 1.75, "metric"], "expected": null}
      ]
    },
    {
      "id": 97,
      "title": "Loan Interest Calculator",
      "statement": "Calculate loan payments and total interest for different loan types: simple interest, compound interest, and amortized loans. For amortized loans, calculate monthly payment using the standard formula and provide amortization schedule summary. Handle different compounding frequencies and payment schedules.",
      "function_signature": "def calculate_loan(principal, annual_rate, term_years, loan_type='amortized', compounding='monthly'):",
      "categories": ["logic_and_conditional", "financial_calculations"],
      "python_constructs": ["financial_formulas", "compound_interest", "amortization_calculations"],
      "hints": [
        "Simple interest: I = P × r × t",
        "Compound interest: A = P(1 + r/n)^(nt)",
        "Amortized payment: PMT = P × [r(1+r)^n] / [(1+r)^n - 1]"
      ],
      "solution": "def calculate_loan(principal, annual_rate, term_years, loan_type='amortized', compounding='monthly'):\n    # Validate inputs\n    if not all(isinstance(x, (int, float)) and x > 0 for x in [principal, annual_rate, term_years]):\n        return None\n    \n    if loan_type not in ['simple', 'compound', 'amortized']:\n        return None\n    \n    # Compounding frequency mapping\n    compounding_freq = {\n        'annually': 1,\n        'semiannually': 2,\n        'quarterly': 4,\n        'monthly': 12,\n        'daily': 365\n    }\n    \n    if compounding not in compounding_freq:\n        return None\n    \n    n = compounding_freq[compounding]\n    r = annual_rate / 100  # Convert percentage to decimal\n    t = term_years\n    \n    if loan_type == 'simple':\n        # Simple Interest: I = P × r × t\n        interest = principal * r * t\n        total_amount = principal + interest\n        \n        return {\n            'loan_type': 'Simple Interest',\n            'principal': round(principal, 2),\n            'total_interest': round(interest, 2),\n            'total_amount': round(total_amount, 2),\n            'monthly_payment': round(total_amount / (t * 12), 2)\n        }\n    \n    elif loan_type == 'compound':\n        # Compound Interest: A = P(1 + r/n)^(nt)\n        total_amount = principal * ((1 + r/n) ** (n * t))\n        interest = total_amount - principal\n        \n        return {\n            'loan_type': 'Compound Interest',\n            'principal': round(principal, 2),\n            'total_interest': round(interest, 2),\n            'total_amount': round(total_amount, 2),\n            'effective_annual_rate': round(((1 + r/n) ** n - 1) * 100, 2)\n        }\n    \n    else:  # amortized\n        # Amortized Loan Payment: PMT = P × [r(1+r)^n] / [(1+r)^n - 1]\n        monthly_rate = r / 12\n        num_payments = t * 12\n        \n        if monthly_rate == 0:\n            monthly_payment = principal / num_payments\n        else:\n            monthly_payment = principal * (monthly_rate * (1 + monthly_rate) ** num_payments) / ((1 + monthly_rate) ** num_payments - 1)\n        \n        total_payments = monthly_payment * num_payments\n        total_interest = total_payments - principal\n        \n        return {\n            'loan_type': 'Amortized Loan',\n            'principal': round(principal, 2),\n            'monthly_payment': round(monthly_payment, 2),\n            'total_payments': round(total_payments, 2),\n            'total_interest': round(total_interest, 2),\n            'number_of_payments': int(num_payments),\n            'interest_percentage': round((total_interest / principal) * 100, 2)\n        }",
      "test_cases": [
        {"input": [200000, 4.5, 30, "amortized", "monthly"], "expected": {"loan_type": "Amortized Loan", "principal": 200000.0, "monthly_payment": 1013.37, "total_payments": 364813.2, "total_interest": 164813.2, "number_of_payments": 360, "interest_percentage": 82.41}},
        {"input": [10000, 5.0, 2, "simple", "annually"], "expected": {"loan_type": "Simple Interest", "principal": 10000.0, "total_interest": 1000.0, "total_amount": 11000.0, "monthly_payment": 458.33}},
        {"input": [15000, 6.0, 5, "compound", "quarterly"], "expected": {"loan_type": "Compound Interest", "principal": 15000.0, "total_interest": 5224.35, "total_amount": 20224.35, "effective_annual_rate": 6.14}},
        {"input": [50000, 3.5, 10, "amortized", "monthly"], "expected": {"loan_type": "Amortized Loan", "principal": 50000.0, "monthly_payment": 493.81, "total_payments": 59257.2, "total_interest": 9257.2, "number_of_payments": 120, "interest_percentage": 18.51}},
        {"input": [-5000, 4.0, 3, "simple", "annually"], "expected": null}
      ]
    },
    {
      "id": 98,
      "title": "Insurance Premium Calculator",
      "statement": "Calculate insurance premiums based on risk factors for auto insurance. Consider: driver age, driving experience, accident history, vehicle type, coverage level, and location risk score. Apply discounts for good driver record, multiple policies, and safety features. Base premium varies by coverage: liability ($400), comprehensive ($800), full coverage ($1200).",
      "function_signature": "def calculate_insurance_premium(age, experience_years, accidents, vehicle_type, coverage_level, location_risk, discounts=None):",
      "categories": ["logic_and_conditional", "risk_assessment"],
      "python_constructs": ["risk_calculation", "discount_application", "premium_adjustment"],
      "hints": [
        "Start with base premium based on coverage level",
        "Apply age factor: higher rates for young (16-25) and senior (70+) drivers",
        "Adjust for accidents, vehicle type risk, and location risk score"
      ],
      "solution": "def calculate_insurance_premium(age, experience_years, accidents, vehicle_type, coverage_level, location_risk, discounts=None):\n    # Validate inputs\n    if not all(isinstance(x, (int, float)) and x >= 0 for x in [age, experience_years, accidents, location_risk]):\n        return None\n    \n    if age < 16 or age > 100:\n        return None\n    \n    # Base premiums by coverage level\n    base_premiums = {\n        'liability': 400,\n        'comprehensive': 800,\n        'full': 1200\n    }\n    \n    if coverage_level not in base_premiums:\n        return None\n    \n    base_premium = base_premiums[coverage_level]\n    \n    # Age factor\n    if age < 25:\n        age_multiplier = 1.8  # Young driver\n    elif age < 30:\n        age_multiplier = 1.3\n    elif age < 65:\n        age_multiplier = 1.0  # Standard rate\n    else:\n        age_multiplier = 1.2  # Senior driver\n    \n    # Experience factor\n    if experience_years < 2:\n        experience_multiplier = 1.5\n    elif experience_years < 5:\n        experience_multiplier = 1.2\n    else:\n        experience_multiplier = 1.0\n    \n    # Accident history factor\n    accident_multiplier = 1.0 + (accidents * 0.25)  # 25% increase per accident\n    \n    # Vehicle type risk factor\n    vehicle_risk = {\n        'sedan': 1.0,\n        'suv': 1.1,\n        'truck': 1.15,\n        'sports': 1.8,\n        'luxury': 1.4,\n        'motorcycle': 2.0\n    }\n    \n    vehicle_multiplier = vehicle_risk.get(vehicle_type.lower(), 1.0)\n    \n    # Location risk factor (0-10 scale)\n    location_multiplier = 1.0 + (location_risk / 10)\n    \n    # Calculate adjusted premium\n    adjusted_premium = (base_premium * age_multiplier * experience_multiplier * \n                       accident_multiplier * vehicle_multiplier * location_multiplier)\n    \n    # Apply discounts\n    total_discount = 0\n    discount_details = []\n    \n    if discounts:\n        discount_rates = {\n            'good_driver': 0.15,  # 15% discount\n            'multi_policy': 0.10,  # 10% discount\n            'safety_features': 0.05,  # 5% discount\n            'defensive_driving': 0.08,  # 8% discount\n            'low_mileage': 0.07  # 7% discount\n        }\n        \n        for discount in discounts:\n            if discount in discount_rates:\n                discount_amount = discount_rates[discount]\n                total_discount += discount_amount\n                discount_details.append({\n                    'type': discount,\n                    'rate': discount_amount,\n                    'savings': round(adjusted_premium * discount_amount, 2)\n                })\n    \n    # Cap total discount at 35%\n    total_discount = min(total_discount, 0.35)\n    \n    final_premium = adjusted_premium * (1 - total_discount)\n    total_savings = adjusted_premium - final_premium\n    \n    return {\n        'base_premium': base_premium,\n        'adjusted_premium': round(adjusted_premium, 2),\n        'final_premium': round(final_premium, 2),\n        'total_savings': round(total_savings, 2),\n        'discount_percentage': round(total_discount * 100, 2),\n        'risk_factors': {\n            'age_multiplier': age_multiplier,\n            'experience_multiplier': experience_multiplier,\n            'accident_multiplier': accident_multiplier,\n            'vehicle_multiplier': vehicle_multiplier,\n            'location_multiplier': round(location_multiplier, 2)\n        },\n        'applied_discounts': discount_details\n    }",
      "test_cases": [
        {"input": [25, 3, 0, "sedan", "comprehensive", 5, ["good_driver", "multi_policy"]], "expected": {"base_premium": 800, "adjusted_premium": 1248.0, "final_premium": 936.0, "total_savings": 312.0, "discount_percentage": 25.0, "risk_factors": {"age_multiplier": 1.3, "experience_multiplier": 1.2, "accident_multiplier": 1.0, "vehicle_multiplier": 1.0, "location_multiplier": 1.5}, "applied_discounts": [{"type": "good_driver", "rate": 0.15, "savings": 187.2}, {"type": "multi_policy", "rate": 0.1, "savings": 124.8}]}},
        {"input": [35, 10, 1, "suv", "full", 3, ["safety_features"]], "expected": {"base_premium": 1200, "adjusted_premium": 1815.0, "final_premium": 1723.25, "total_savings": 91.75, "discount_percentage": 5.0, "risk_factors": {"age_multiplier": 1.0, "experience_multiplier": 1.0, "accident_multiplier": 1.25, "vehicle_multiplier": 1.1, "location_multiplier": 1.3}, "applied_discounts": [{"type": "safety_features", "rate": 0.05, "savings": 90.75}]}},
        {"input": [20, 1, 2, "sports", "liability", 8, null], "expected": {"base_premium": 400, "adjusted_premium": 1944.0, "final_premium": 1944.0, "total_savings": 0.0, "discount_percentage": 0.0, "risk_factors": {"age_multiplier": 1.8, "experience_multiplier": 1.5, "accident_multiplier": 1.5, "vehicle_multiplier": 1.8, "location_multiplier": 1.8}, "applied_discounts": []}},
        {"input": [45, 15, 0, "truck", "comprehensive", 2, ["good_driver", "multi_policy", "defensive_driving"]], "expected": {"base_premium": 800, "adjusted_premium": 1104.0, "final_premium": 788.88, "total_savings": 315.12, "discount_percentage": 28.54, "risk_factors": {"age_multiplier": 1.0, "experience_multiplier": 1.0, "accident_multiplier": 1.0, "vehicle_multiplier": 1.15, "location_multiplier": 1.2}, "applied_discounts": [{"type": "good_driver", "rate": 0.15, "savings": 165.6}, {"type": "multi_policy", "rate": 0.1, "savings": 110.4}, {"type": "defensive_driving", "rate": 0.08, "savings": 88.32}]}},
        {"input": [15, 0, 0, "sedan", "liability", 1, null], "expected": null}
      ]
    },
    {
      "id": 99,
      "title": "Credit Score Assessment System",
      "statement": "Assess credit score based on financial factors: payment history (35%), credit utilization (30%), credit history length (15%), credit mix (10%), new credit inquiries (10%). Score ranges: Poor (300-579), Fair (580-669), Good (670-739), Very Good (740-799), Excellent (800-850). Provide improvement recommendations.",
      "function_signature": "def assess_credit_score(payment_history_score, credit_utilization, credit_history_months, num_credit_types, recent_inquiries):",
      "categories": ["logic_and_conditional", "financial_assessment"],
      "python_constructs": ["weighted_scoring", "credit_assessment", "recommendation_logic"],
      "hints": [
        "Calculate weighted score using the given percentages for each factor",
        "Convert credit utilization percentage to score (lower is better)",
        "Provide specific recommendations based on weak areas"
      ],
      "solution": "def assess_credit_score(payment_history_score, credit_utilization, credit_history_months, num_credit_types, recent_inquiries):\n    # Validate inputs\n    if not all(isinstance(x, (int, float)) and x >= 0 for x in [payment_history_score, credit_utilization, credit_history_months, num_credit_types, recent_inquiries]):\n        return None\n    \n    if not (0 <= payment_history_score <= 100) or credit_utilization > 100:\n        return None\n    \n    # Convert individual factors to scores (0-100 scale)\n    \n    # Payment history (already 0-100)\n    payment_score = payment_history_score\n    \n    # Credit utilization (lower is better)\n    if credit_utilization <= 10:\n        utilization_score = 100\n    elif credit_utilization <= 30:\n        utilization_score = 90 - (credit_utilization - 10) * 2\n    elif credit_utilization <= 50:\n        utilization_score = 50 - (credit_utilization - 30) * 1.5\n    elif credit_utilization <= 90:\n        utilization_score = 20 - (credit_utilization - 50) * 0.5\n    else:\n        utilization_score = 0\n    \n    # Credit history length (longer is better)\n    if credit_history_months >= 240:  # 20+ years\n        history_score = 100\n    elif credit_history_months >= 120:  # 10+ years\n        history_score = 80 + (credit_history_months - 120) * 20 / 120\n    elif credit_history_months >= 60:  # 5+ years\n        history_score = 60 + (credit_history_months - 60) * 20 / 60\n    elif credit_history_months >= 24:  # 2+ years\n        history_score = 40 + (credit_history_months - 24) * 20 / 36\n    else:\n        history_score = max(0, credit_history_months * 40 / 24)\n    \n    # Credit mix (diversity is good, but not essential)\n    if num_credit_types >= 5:\n        mix_score = 100\n    elif num_credit_types >= 3:\n        mix_score = 80 + (num_credit_types - 3) * 10\n    elif num_credit_types >= 1:\n        mix_score = 50 + (num_credit_types - 1) * 15\n    else:\n        mix_score = 0\n    \n    # Recent inquiries (fewer is better)\n    if recent_inquiries == 0:\n        inquiry_score = 100\n    elif recent_inquiries <= 2:\n        inquiry_score = 80 - recent_inquiries * 10\n    elif recent_inquiries <= 5:\n        inquiry_score = 60 - (recent_inquiries - 2) * 15\n    else:\n        inquiry_score = max(0, 15 - (recent_inquiries - 5) * 5)\n    \n    # Calculate weighted credit score\n    weighted_score = (\n        payment_score * 0.35 +\n        utilization_score * 0.30 +\n        history_score * 0.15 +\n        mix_score * 0.10 +\n        inquiry_score * 0.10\n    )\n    \n    # Convert to credit score range (300-850)\n    credit_score = int(300 + (weighted_score / 100) * 550)\n    \n    # Determine credit rating\n    if credit_score >= 800:\n        rating = 'Excellent'\n    elif credit_score >= 740:\n        rating = 'Very Good'\n    elif credit_score >= 670:\n        rating = 'Good'\n    elif credit_score >= 580:\n        rating = 'Fair'\n    else:\n        rating = 'Poor'\n    \n    # Generate recommendations\n    recommendations = []\n    \n    if payment_score < 90:\n        recommendations.append('Make all payments on time to improve payment history')\n    \n    if credit_utilization > 30:\n        recommendations.append(f'Reduce credit utilization below 30% (currently {credit_utilization}%)')\n    elif credit_utilization > 10:\n        recommendations.append('Consider reducing credit utilization below 10% for optimal score')\n    \n    if credit_history_months < 60:\n        recommendations.append('Keep old accounts open to increase average account age')\n    \n    if num_credit_types < 3:\n        recommendations.append('Consider diversifying credit types (credit cards, loans, etc.)')\n    \n    if recent_inquiries > 2:\n        recommendations.append('Limit credit applications to reduce hard inquiries')\n    \n    if not recommendations:\n        recommendations.append('Maintain current good credit habits')\n    \n    return {\n        'credit_score': credit_score,\n        'rating': rating,\n        'component_scores': {\n            'payment_history': round(payment_score, 1),\n            'credit_utilization': round(utilization_score, 1),\n            'credit_history': round(history_score, 1),\n            'credit_mix': round(mix_score, 1),\n            'recent_inquiries': round(inquiry_score, 1)\n        },\n        'recommendations': recommendations\n    }",
      "test_cases": [
        {"input": [95, 15, 120, 4, 1], "expected": {"credit_score": 774, "rating": "Very Good", "component_scores": {"payment_history": 95.0, "credit_utilization": 80.0, "credit_history": 80.0, "credit_mix": 90.0, "recent_inquiries": 90.0}, "recommendations": ["Consider reducing credit utilization below 10% for optimal score"]}},
        {"input": [100, 5, 180, 5, 0], "expected": {"credit_score": 835, "rating": "Excellent", "component_scores": {"payment_history": 100.0, "credit_utilization": 100.0, "credit_history": 90.0, "credit_mix": 100.0, "recent_inquiries": 100.0}, "recommendations": ["Maintain current good credit habits"]}},
        {"input": [70, 60, 24, 1, 5], "expected": {"credit_score": 542, "rating": "Poor", "component_scores": {"payment_history": 70.0, "credit_utilization": 5.0, "credit_history": 40.0, "credit_mix": 50.0, "recent_inquiries": 15.0}, "recommendations": ["Make all payments on time to improve payment history", "Reduce credit utilization below 30% (currently 60%)", "Consider diversifying credit types (credit cards, loans, etc.)", "Limit credit applications to reduce hard inquiries"]}},
        {"input": [85, 25, 60, 3, 2], "expected": {"credit_score": 714, "rating": "Good", "component_scores": {"payment_history": 85.0, "credit_utilization": 60.0, "credit_history": 60.0, "credit_mix": 80.0, "recent_inquiries": 60.0}, "recommendations": ["Consider reducing credit utilization below 10% for optimal score"]}},
        {"input": [-10, 25, 60, 3, 2], "expected": null}
      ]
    }
  ]
}